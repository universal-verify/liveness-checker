const e=new class{constructor(){}checkLiveness(e={}){return new Promise(((n,t)=>{let r=!1;const a=Math.random().toString(36).substring(2,15),s=e.localTesting?"../index.html":"https://universal-verify.github.io/liveness-checker/",c=e.localTesting?window.location.origin:"https://universal-verify.github.io",i=window.open(s,"_blank");if(!i)return void t("POPUP_BLOCKED");function cleanup(){window.removeEventListener("message",handler),clearInterval(o)}function handler(e){if(e.source===i)if("liveness-check-result"===e.data.type){if(e.data.nonce!==a)return;r=!0,n(),i.close(),cleanup()}else if("liveness-check-error"===e.data.type){if(e.data.nonce!==a)return;r=!0,e.data.error.includes("webcam")?t("WEBCAM_ERROR"):t("INTERNAL_ERROR"),i.close(),cleanup()}else"check-parent-commandeer"===e.data.type&&i.postMessage({type:"confirm-parent-commandeer",nonce:a},c)}window.addEventListener("message",handler);const o=setInterval((()=>{i.closed&&!r&&(r=!0,t("CANCELLED"),cleanup())}),500)}))}};export{e as default};
